import React, { useEffect, useRef, useState } from 'react';
import MapView, { PROVIDER_GOOGLE, Region, Marker, Callout } from 'react-native-maps';
import { Alert, StyleSheet, TouchableOpacity, PermissionsAndroid, Platform, View, Text, Image } from 'react-native';
import * as Location from 'expo-location';
import { useNavigation } from 'expo-router';
import Icon from 'react-native-vector-icons/FontAwesome';
import { markers } from '../assets/markers';

// Interfaz para los datos del marcador
interface MarkerData {
	id: string; // Asegúrate de que esta propiedad exista
	latitude: number;
	longitude: number;
	name: string;
	imageUrl: string;
	isOpen: boolean;
	address: string;
	regulated: boolean;
	shift: boolean;
  }

  // Datos de los marcadores
export const markers: MarkerData[] = [
	{
	  id: '1',
	  latitude: -17.3895,
	  longitude: -66.1568,
	  name: 'Farmacia 1',
	  imageUrl: 'https://example.com/image1.jpg',
	  isOpen: true,
	  address: 'Dirección 1',
	  regulated: true,
	  shift: true,
	},
	{
	  id: '2',
	  latitude: -17.3896,
	  longitude: -66.1569,
	  name: 'Farmacia 2',
	  imageUrl: 'https://example.com/image2.jpg',
	  isOpen: false,
	  address: 'Dirección 2',
	  regulated: false,
	  shift: false,
	},
	// Agrega más marcadores según sea necesario
 
	// Más marcadores...
  ];
  

const INITIAL_REGION = {
  latitude: -17.3895, // Cochabamba
  longitude: -66.1568, // Cochabamba
  latitudeDelta: 0.1,
  longitudeDelta: 0.1,
};

export default function App() {
  const navigation = useNavigation();
  const mapRef = useRef<MapView>(null);
  const [locationPermission, setLocationPermission] = useState(false);
  const [currentLocation, setCurrentLocation] = useState<Location.LocationObjectCoords | null>(null);

  useEffect(() => {
    requestLocationPermission();
  }, []);

  const requestLocationPermission = async () => {
    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
          {
            title: 'Permiso de Ubicación',
            message: 'La aplicación necesita acceso a tu ubicación para mostrar tu posición en el mapa.',
            buttonNeutral: 'Preguntar después',
            buttonNegative: 'Cancelar',
            buttonPositive: 'OK',
          }
        );
        if (granted === PermissionsAndroid.RESULTS.GRANTED) {
          setLocationPermission(true);
          getUserLocation();
        } else {
          Alert.alert('Permiso denegado', 'No se puede acceder a la ubicación.');
        }
      } catch (err) {
        console.warn(err);
      }
    } else {
      setLocationPermission(true);
      getUserLocation();
    }
  };

  const getUserLocation = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permiso denegado', 'No se puede acceder a la ubicación.');
        return;
      }

      const location = await Location.getCurrentPositionAsync({});
      setCurrentLocation(location.coords);
    } catch (error) {
      Alert.alert('Error', 'No se pudo obtener la ubicación.');
      console.log(error);
    }
  };

  const centerUserLocation = () => {
    if (currentLocation) {
      mapRef.current?.animateCamera({
        center: {
          latitude: currentLocation.latitude,
          longitude: currentLocation.longitude,
        },
        zoom: 17,
      }, { duration: 1000 });
    } else {
      Alert.alert('Ubicación no disponible', 'No se pudo obtener la ubicación del usuario.');
    }
  };

	const [selectedMarker, setSelectedMarker] = useState(null);

	const onMarkerSelected = (marker: MarkerData) => {
		setSelectedMarker(marker);
		mapRef.current?.animateCamera({
		  center: {
			latitude: marker.latitude,
			longitude: marker.longitude,
		  },
		  zoom: 17,
		}, { duration: 1000 });
	  };
	  
	

	const calloutPressed = (ev: any) => {
		console.log(ev);
	};

	const onRegionChange = (region: Region) => {
		console.log(region);
	};

  return (
    <View style={{ flex: 1 }}>
      <MapView
        style={StyleSheet.absoluteFillObject}
        initialRegion={INITIAL_REGION}
        showsUserLocation={locationPermission}
        showsMyLocationButton={false}
        provider={PROVIDER_GOOGLE}
        ref={mapRef}
        onRegionChangeComplete={onRegionChange}
      >
        {markers.map((marker, index) => (
			<Marker
			key={marker.id}
			coordinate={{ latitude: marker.latitude, longitude: marker.longitude }}
			pinColor="blue" // Color del pin
			onPress={() => onMarkerSelected(marker)}
		>
			<Callout>
				<View style={styles.calloutContainer}>
					<Image source={{ uri: marker.imageUrl }} style={styles.calloutImage} />
					<Text style={styles.calloutTitle}>{marker.name}</Text>
					<Text>{marker.isOpen ? 'Abierto' : 'Cerrado'}</Text>
					<Text>Dirección: {marker.address}</Text>
					<Text>Medicamentos regulados: {marker.regulated ? 'Sí' : 'No'}</Text>
					<Text>{marker.shift ? 'Está de turno' : 'No está de turno'}</Text>
				</View>
			</Callout>
		</Marker>
	  
        ))}
      </MapView>

      <TouchableOpacity style={styles.locationButton} onPress={centerUserLocation}>
        <Icon name="bullseye" size={24} color="blue" />
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
	calloutContainer: {
        width: 150,
        padding: 10,
    },
    calloutImage: {
        width: 100,
        height: 100,
        borderRadius: 5,
    },
    calloutTitle: {
        fontWeight: 'bold',
    },
  locationButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#fff',
    borderRadius: 50,
    padding: 15,
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.8,
    shadowRadius: 2,
  },
});
[{
	"resource": "/c:/Users/DANIEL/Documents/new mapas/PR-24-MAPAS-FARMACIAS/MAPAS_FARMACIAS/app/index.tsx",
	"owner": "typescript",
	"code": "2395",
	"severity": 8,
	"message": "Las declaraciones individuales de la declaración 'markers' combinada deben ser todas exportadas o todas locales.",
	"source": "ts",
	"startLineNumber": 7,
	"startColumn": 10,
	"endLineNumber": 7,
	"endColumn": 17
}]
[{
	"resource": "/c:/Users/DANIEL/Documents/new mapas/PR-24-MAPAS-FARMACIAS/MAPAS_FARMACIAS/app/index.tsx",
	"owner": "typescript",
	"code": "2440",
	"severity": 8,
	"message": "La declaración de importación está en conflicto con la declaración local de \"markers\".",
	"source": "ts",
	"startLineNumber": 7,
	"startColumn": 10,
	"endLineNumber": 7,
	"endColumn": 17
}]
[{
	"resource": "/c:/Users/DANIEL/Documents/new mapas/PR-24-MAPAS-FARMACIAS/MAPAS_FARMACIAS/app/index.tsx",
	"owner": "typescript",
	"code": "2395",
	"severity": 8,
	"message": "Las declaraciones individuales de la declaración 'markers' combinada deben ser todas exportadas o todas locales.",
	"source": "ts",
	"startLineNumber": 23,
	"startColumn": 14,
	"endLineNumber": 23,
	"endColumn": 21
}]
[{
	"resource": "/c:/Users/DANIEL/Documents/new mapas/PR-24-MAPAS-FARMACIAS/MAPAS_FARMACIAS/app/index.tsx",
	"owner": "typescript",
	"code": "2345",
	"severity": 8,
	"message": "No se puede asignar un argumento de tipo \"MarkerData\" al parámetro de tipo \"SetStateAction<null>\".\n  El tipo \"MarkerData\" no proporciona ninguna coincidencia para la signatura \"(prevState: null): null\".",
	"source": "ts",
	"startLineNumber": 130,
	"startColumn": 21,
	"endLineNumber": 130,
	"endColumn": 27
}]